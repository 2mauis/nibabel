""" Tests for warnings context managers
"""
from __future__ import division, print_function, absolute_import

import sys
from warnings import warn, simplefilter, filters

import numpy as np

from nose.tools import assert_true, assert_equal, assert_raises
from ..testing import (error_warnings, suppress_warnings,
                       clear_and_catch_warnings, assert_allclose_safely)


def assert_warn_len_equal(mod, n_in_context):
    mod_warns = mod.__warningregistry__
    # Python 3.4 appears to clear any pre-existing warnings of the same type,
    # when raising warnings inside a catch_warnings block. So, there is a
    # warning generated by the tests within the context manager, but no
    # previous warnings.
    if 'version' in mod_warns:
        assert_equal(len(mod_warns), 2)  # including 'version'
    else:
        assert_equal(len(mod_warns), n_in_context)


def test_assert_allclose_safely():
    # Test the safe version of allclose
    assert_allclose_safely([1, 1], [1, 1])
    assert_allclose_safely(1, 1)
    assert_allclose_safely(1, [1, 1])
    assert_allclose_safely([1, 1], 1 + 1e-6)
    assert_raises(AssertionError, assert_allclose_safely, [1, 1], 1 + 1e-4)
    # Broadcastable matrices
    a = np.ones((2, 3))
    b = np.ones((3, 2, 3))
    eps = np.finfo(np.float).eps
    a[0, 0] = 1 + eps
    assert_allclose_safely(a, b)
    a[0, 0] = 1 + 1.1e-5
    assert_raises(AssertionError, assert_allclose_safely, a, b)
    # Nans in same place
    a[0, 0] = np.nan
    b[:, 0, 0] = np.nan
    assert_allclose_safely(a, b)
    # Never equal with nans present, if not matching nans
    assert_raises(AssertionError,
                  assert_allclose_safely, a, b,
                  match_nans=False)
    b[0, 0, 0] = 1
    assert_raises(AssertionError, assert_allclose_safely, a, b)
    # Test allcloseness of inf, especially np.float128 infs
    for dtt in np.sctypes['float']:
        a = np.array([-np.inf, 1, np.inf], dtype=dtt)
        b = np.array([-np.inf, 1, np.inf], dtype=dtt)
        assert_allclose_safely(a, b)
        b[1] = 0
        assert_raises(AssertionError, assert_allclose_safely, a, b)
    # Empty compares equal to empty
    assert_allclose_safely([], [])


def test_warn_error():
    # Check warning error context manager
    n_warns = len(filters)
    with error_warnings():
        assert_raises(UserWarning, warn, 'A test')
    with error_warnings() as w: # w not used for anything
        assert_raises(UserWarning, warn, 'A test')
    assert_equal(n_warns, len(filters))
    # Check other errors are propagated
    def f():
        with error_warnings():
            raise ValueError('An error')
    assert_raises(ValueError, f)


def test_warn_ignore():
    # Check warning ignore context manager
    n_warns = len(filters)
    with suppress_warnings():
        warn('Here is a warning, you will not see it')
        warn('Nor this one', DeprecationWarning)
    with suppress_warnings() as w: # w not used
        warn('Here is a warning, you will not see it')
        warn('Nor this one', DeprecationWarning)
    assert_equal(n_warns, len(filters))
    # Check other errors are propagated
    def f():
        with suppress_warnings():
            raise ValueError('An error')
    assert_raises(ValueError, f)
