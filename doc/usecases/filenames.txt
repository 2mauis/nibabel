========================
 Usecases for filenames
========================

Here we describe the uses that we might make of a filename attached to
an image.

The images need not ever be associated with files.  We can imagine other
storage for images, that are not in files, but - for example -
databases, or file-like objects.

An image can exist without a filename, when we create the image in memory::

   import numpy as np
   import nifti
   data = np.arange(24).reshape((2,3,4))
   img = nifti.Nifti1Image(data, np.eye(4))

Some images will have filenames.  For example, if we load an image from
disk, there is a natural association with the filename::

   img = nifti.load('somefile.nii')

We could get the filenames with one of::

   img.filename

or::

   img.get_filename()

The argument for the second is that we will also want to set the
filename.  The setter will want to expand filenames that are
interpretable but not full.  For example, the following might all be OK
for an image ``somefile.img``::

   img.set_filename('somefile')
   img.set_filename('somefile.hdr')
   img.set_filename('somefile.img')

If that is true, imagine a property ``img.filename`` which encapsulates
the get and set calls.  It would have the following annoying behavior::

   img.filename = 'somefile'
   assert img.filename == 'somefile.img'
   img.filename = 'somefile.hdr'
   assert img.filename == 'somefile.img'

In this case I think getters and setters are more pleasant.

The filename should probably follow the image around even if the image
in memory has diverged very far from the image on disk::

   img = nifti.load('somefile.nii')
   idata = img.get_data()
   idata[:] = 0
   hdr = img.get_header()
   hdr['descrip'] = 'something strange'
   assert img.get_filename() == 'somefile.nii'

The ``set_filename`` method follows a standard algorithm for deciding on
filenames based on a template name.  Imagine a hidden attribute,
``_files``, like this::

   img = nifti.load('somefile.img')
   assert set(img._files.keys()) == set(['header', 'image'])
   assert img._files['image'] == 'somefile.img'
   assert img._files['header'] == 'somefile.hdr'

Sometimes we may want not-standard names.  For example, the image binary
data could be some binary data block ``mydata.dat`` extension, but there
is a ``mydata.hdr`` file that, with the binary data block, makes an
Analyze or NIfTI image.  We can imagine the same for DICOM images, as in
a ``dicom_file.dcm, dicom_file.hdr`` pair, where the header contains
datatype, shape and offset necessary for reading the data out of the
binary DICOM file.  How would that work? The current ``SpatialImage``
implementation goes like this::

   files = {'image':'dicom_file.dcm', 'header':'dicom_file.hdr'}
   img = nifti.Nifti1Image.from_files(files)

In this case, what to do with ``get_filename``.  Consider this situation::

   assert img.get_filename() == 'dicom_file.dcm'

Seems reasonable.  How about this?::

   files = {'image':'dicom_file', 'header':'dicom_file.hdr'}
   img = nifti.Nifti1Image.from_files(files)
   assert img.get_filename() == 'dicom_file'
   img.set_filename('dicom_file')
   assert img.get_filename() = 'dicom_file.nii'

Probably OK, but a little confusing.

This also allows saving into - and loading from - already open file-like
objects.  The main use for this is testing, but we could imagine
wrapping some other storage mechanism in file-like objects::

   from StringIO import StringIO
   files = {'image':StringIO(), 'header':StringIO()}
   img = nifti.Nifti1Image(data, np.eye(4))
   img.to_files(files)
   
In this last case, there is obviously not a valid filename::

   assert img.get_filename() is None
   
Questions
=========

Can we set the filename from the class ``__init__()``?  For example::

   img = nifti.Nifti1Image(data, np.eye(4), filename='my_image.nii')

If so, does it just use ``set_filename`` - i.e. is this confusing?::

   img = nifti.Nifti1Image(data, np.eye(4), filename='my_image')
   assert img.get_filename() == 'my_image.nii'

Can we also set what I have called ``_files`` from the ``init``?::

   files = {'image':'dicom_file', 'header':'dicom_file.hdr'}
   img = nifti.Nifti1Image(data, np.eye(4), files=files)

Probably not, the ``Nifti1Image.from_files`` constructor seems to cover
that one.


